if(typeof __nccwpck_require__!=="undefined")__nccwpck_require__.ab=new URL(".",import.meta.url).pathname.slice(import.meta.url.match(/^file:\/\/\/\w:/)?1:0,-1)+"/";var e={};var r=undefined&&undefined.__createBinding||(Object.create?function(e,r,t,n){if(n===undefined)n=t;var o=Object.getOwnPropertyDescriptor(r,t);if(!o||("get"in o?!r.__esModule:o.writable||o.configurable)){o={enumerable:true,get:function(){return r[t]}}}Object.defineProperty(e,n,o)}:function(e,r,t,n){if(n===undefined)n=t;e[n]=r[t]});var t=undefined&&undefined.__setModuleDefault||(Object.create?function(e,r){Object.defineProperty(e,"default",{enumerable:true,value:r})}:function(e,r){e["default"]=r});var n=undefined&&undefined.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(e!=null)for(var o in e)if(o!=="default"&&Object.prototype.hasOwnProperty.call(e,o))r(n,e,o);t(n,e);return n};Object.defineProperty(exports,"__esModule",{value:true});const o=n(require("@actions/core"));const i=require("@octokit/graphql");require("source-map-support/register");const u=n(require("./client"));async function run(){const errHandler=e=>{if(e instanceof i.GraphqlResponseError){o.error('Unable to enable automerge.Enable branch protection and activate one or more "branch protection rules". See https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request#enabling-auto-merge and https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/managing-a-branch-protection-rule for more information');o.setFailed(e);return}if(e instanceof Error){o.error(e);o.setFailed(e);return}const r=e instanceof Error?e:JSON.stringify(e);o.error(r);o.setFailed(r)};try{const e=o.getInput("github_token");const r=Number(o.getInput("pull_request_number"));const t=o.getInput("owner");const n=o.getInput("repository");const i=o.getInput("merge_method");o.info(`owner: ${t}`);o.info(`repository: ${n}`);o.info(`pull_request_number: ${r}`);o.info(`merge_method: ${i}`);if(r===0){errHandler(new Error("pull_request_number or pull_request_id must be specified"))}const a=new u.default(e);const s=await a.findPullRequestId({owner:t,repo:n,number:r});const{id:c,state:l}=s??{};if(l!=="OPEN"){o.warning(`target pull request state: ${l}`);return}o.info(`target pull request id: ${c}`);if(c){await a.enableAutoMerge(i?{pullRequestId:c,mergeMethod:u.MergeMethod.valueOf(i)}:{pullRequestId:c})}}catch(e){errHandler(e)}}Promise.resolve(run()).catch((e=>{o.error(e.stack?e.stack?.toString():e);o.setFailed(e)}));