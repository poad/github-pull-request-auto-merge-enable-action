name: CI (test)

on:
  pull_request:
    branches:
      - 'main'
      - '!test-base-*'
  push:
    branches:
      - main

  workflow_dispatch:

permissions:
  pull-requests: write
  contents: write

jobs:
  test:
    strategy:
      matrix:
        options: [
          { merge-method: '', with-approve: true },
          { merge-method: 'MERGE', with-approve: true },
          { merge-method: 'SQUASH', with-approve: true },
          { merge-method: 'REBASE', with-approve: true },
          { merge-method: '', with-approve: false },
          { merge-method: 'MERGE', with-approve: false },
          { merge-method: 'SQUASH', with-approve: false },
          { merge-method: 'REBASE', with-approve: false }
        ]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - uses: oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76  # v2.0.2

    - name: Build and lint
      run: |
        bun install

    - name: Git config
      run: |
        git config --local user.email "ken-yo@mbr.nifty.com"
        git config --local user.name "Kenji Saito"

    - name: Create common input
      id: create-input
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "URL=https://${{ github.actor }}:${GITHUB_TOKEN}@github.com/${{ github.repository }}" >> "$GITHUB_OUTPUT"

    - name: Generate branch suffix
      id: gen-suffix
      env:
        medhod: ${{ matrix.options.merge-method }}
        approve: ${{ matrix.options.with-approve }}
      run: |
        SUFFIX=""
        if [ "${medhod}" != "" ]; then
          if [ "${approve}" != "" ]; then
            SUFFIX="-${medhod}-${approve}"
          else
            SUFFIX="-${medhod}"
          fi
        else
          if [ "${approve}" != "" ]; then
            SUFFIX="-${approve}"
          fi
        fi
        echo "SUFFIX=${SUFFIX}" >> "$GITHUB_OUTPUT"

    - name: Create base branch
      id: create-base-input
      env:
        suffix: ${{ steps.gen-suffix.outputs.SUFFIX }}
      run: |

        BASE_BRANCH_NAME="test-base-$(date "+%Y%m%d-%H%M%S%3N")${suffix}"
        git switch -c "${BASE_BRANCH_NAME}"
        touch test.txt
        git add test.txt
        git commit -m "Test $(date)"
        echo "BASE_BRANCH_NAME=${BASE_BRANCH_NAME}" >> "$GITHUB_OUTPUT"

    - name: Push Base
      env:
        BASE_BRANCH_NAME: ${{ steps.create-base-input.outputs.BASE_BRANCH_NAME }}
      run: git push "${{ steps.create-input.outputs.URL }}" "HEAD:${BASE_BRANCH_NAME}" --follow-tags

    - name: Create head branch
      id: create-head-input
      env:
        suffix: ${{ steps.gen-suffix.outputs.SUFFIX }}
      run: |
        BRANCH_NAME="test-$(date "+%Y%m%d-%H%M%S%3N")$suffix"
        git switch -c "${BRANCH_NAME}"
        touch test1.txt
        git add test1.txt
        git commit -m "Test $(date)"
        echo "BRANCH_NAME=${BRANCH_NAME}" >> "$GITHUB_OUTPUT"
        echo "TIMESTAMP=$(date)" >> "$GITHUB_OUTPUT"

    - name: Push Changes
      env:
        BRANCH_NAME: ${{ steps.create-head-input.outputs.BRANCH_NAME }}
      run: git push "${{ steps.create-input.outputs.URL }}" "HEAD:${BRANCH_NAME}" --follow-tags

    - name: Create pull request
      id: create-pull-request
      uses: poad/github-pull-requester@37b052e05f3b3abc9910a6aa794c2fc364c58509 # v3.0.0
      with:
        head_branch: ${{ steps.create-head-input.outputs.BRANCH_NAME }}
        base_branch: ${{ steps.create-base-input.outputs.BASE_BRANCH_NAME }}
        title: ${{ format('Test for {0}', steps.create-head-input.outputs.TIMESTAMP) }}
        body: ${{ format('Test for {0}', steps.create-head-input.outputs.TIMESTAMP) }}
        github_token: ${{ secrets.GITHUB_TOKEN }}
        owner: ${{ github.repository_owner }}
        repository: ${{ github.event.repository.name }}

    - name: Extract response
      id: create-response
      env:
        RESULT: ${{ steps.create-pull-request.outputs.result }}
      run: |
        PULL_REQUEST_HTML_URL=$(echo ${RESULT} | jq -r .data.html_url)
        echo "PULL_REQUEST_HTML_URL=${PULL_REQUEST_HTML_URL}" >> $GITHUB_ENV
        PULL_REQUEST_NUMBER=$(echo ${RESULT} | jq -r .data.number)
        echo "PULL_REQUEST_NUMBER=${PULL_REQUEST_NUMBER}" >> "$GITHUB_OUTPUT"

    - name: sleep
      run: sleep 5

    - name: Enable auto merge test (for Pull request target)
      env:
        GITHUB: $${{ toJSON(github) }}
      uses: ./
      with:
        pull_request_number: ${{ steps.create-response.outputs.PULL_REQUEST_NUMBER }}
        github_token: ${{ secrets.GITHUB_TOKEN }}
        repository:  ${{ github.event.repository.name }}
        owner: ${{ github.repository_owner }}
        merge_method: ${{ matrix.options.merge-method }}
        with_approve: ${{ matrix.options.with-approve }}

    - name: sleep
      run: sleep 5

    - name: Close Pull Request
      uses: peter-evans/close-pull@a192af8d70f2d49c49643134605c3b73d4f80fae # v3.0.1
      if: ${{ always() }}
      with:
        pull-request-number: ${{ steps.create-response.outputs.PULL_REQUEST_NUMBER }}
        comment: Auto-closing pull request
        delete-branch: true

    - name: Delete base branch
      if: ${{ always() }}
      env:
        BASE_BRANCH_NAME: ${{ steps.create-base-input.outputs.BASE_BRANCH_NAME }}
      run: git push --delete origin ${BASE_BRANCH_NAME}
